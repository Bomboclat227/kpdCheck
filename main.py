from pydantic import BaseModel
import httpx
from fastapi import FastAPI, HTTPException
from datetime import datetime
import os
from dotenv import load_dotenv
import logging

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TELEGRAM_TOKEN = "8082498905:AAH6dsU3rtYxdo7n0avI0sZ831gcQVSZz40"
CHAT_ID = "5860900715"

app = FastAPI()


class CheckRequest(BaseModel):
    url: str


class Message(BaseModel):
    text: str


@app.post("/send_message")
async def send_message_endpoint(message: Message):
    """Endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ API"""
    return await send_telegram_message(message.text)


async def send_telegram_message(text: str):
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": CHAT_ID,
        "text": text,
        "parse_mode": "HTML"  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    }

    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.post(url, data=payload)
            if response.status_code == 200:
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                return {"status": "success", "response": response.json()}
            else:
                logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {response.status_code}")
                return {"status": "error", "code": response.status_code}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
        return {"status": "error", "message": str(e)}


@app.post("/check_sourse")
async def check_service(data: CheckRequest):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
    url = data.url
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {url}")

    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.get(url)

        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç {url}: HTTP {response.status_code}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–¥—ã –æ—à–∏–±–æ–∫
        if response.status_code >= 500:  # 5xx –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
            error_msg = (
                f"üö® <b>–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞)</b>\n"
                f"üåê Sourse: {url}\n"
                f"üìä Status code: {response.status_code}\n"
                f"‚è± Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )
            await send_telegram_message(error_msg)
            raise HTTPException(
                status_code=response.status_code,
                detail=f"–ò—Å—Ç–æ—á–Ω–∏–∫ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}"
            )

        elif response.status_code >= 400:  # 4xx –æ—à–∏–±–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
            error_msg = (
                f"‚ö†Ô∏è <b>–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É</b>\n"
                f"üåê Sourse: {response.status_code}\n"
                f"‚è± Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )
            await send_telegram_message(error_msg)
            raise HTTPException(
                status_code=response.status_code,
                detail=f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {response.status_code}"
            )

        # –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        return {
            "status": "ok",
            "code": response.status_code,
            "url": url,
            "timestamp": datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }

    except httpx.ConnectError as e:
        error_msg = (
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É</b>\n"
            f"üåê URL: {url}\n"
            f"üîå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n"
            f"üìù –î–µ—Ç–∞–ª–∏: {str(e)}\n"
            f"‚è± –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {url}: {e}")
        await send_telegram_message(error_msg)
        raise HTTPException(status_code=502, detail="–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")

    except httpx.TimeoutException as e:
        error_msg = (
            f"‚è∞ <b>–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É</b>\n"
            f"üåê URL: {url}\n"
            f"‚è± –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ\n"
            f"üìù –î–µ—Ç–∞–ª–∏: {str(e)}\n"
            f"‚è± –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )
        logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ {url}: {e}")
        await send_telegram_message(error_msg)
        raise HTTPException(status_code=504, detail="–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ç–∞–π–º–∞—É—Ç")

    except Exception as e:
        error_msg = (
            f"üí• <b>–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞</b>\n"
            f"üåê URL: {url}\n"
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n"
            f"‚è± –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {url}: {e}")
        await send_telegram_message(error_msg)
        raise HTTPException(status_code=502, detail=f"–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}")


@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return {
        "message": "Source Checker API",
        "endpoints": {
            "POST /check_sourse": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∞",
            "POST /send_message": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram",
            "GET /health": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"
        }
    }


@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        "telegram_configured": bool(TELEGRAM_TOKEN and CHAT_ID)
    }


@app.post("/test-telegram")
async def test_telegram():
    """–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    test_message = (
        f"üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n"
        f"‚è± –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        f"‚úÖ –°–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    )

    result = await send_telegram_message(test_message)
    return result


if __name__ == "__main__":
    import uvicorn

    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)